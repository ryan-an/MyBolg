<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>vue3封装router路由管理器</title>
    <link href="/2022/04/04/vue3%E5%B0%81%E8%A3%85router%E8%B7%AF%E7%94%B1%E7%AE%A1%E7%90%86%E5%99%A8/"/>
    <url>/2022/04/04/vue3%E5%B0%81%E8%A3%85router%E8%B7%AF%E7%94%B1%E7%AE%A1%E7%90%86%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>router封装与使用很简单，一般结合项目中业务做一些封装处理，当然也会结合layout、meunNav做子路由控制封装以及角色权限控制等等。我这里做一个简单通用的封装</p></blockquote><h2 id="安装与使用"><a href="#安装与使用" class="headerlink" title="安装与使用"></a>安装与使用</h2><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs llvm">yarn <span class="hljs-keyword">add</span> vue-router<span class="hljs-title">@next</span><br></code></pre></td></tr></table></figure><p>src目录下新建router、views文件夹，文件夹下分别建立modules文件夹、HelloWord.vue文件<br>router新建index.ts配置如下,此配置作为router的主文件，导入modules文件夹内的所有路由配置，设置路由模式、全局守卫等属性。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-comment">// index.ts</span><br><span class="hljs-keyword">import</span> &#123; createRouter, createWebHashHistory &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue-router&#x27;</span><br><span class="hljs-keyword">const</span> moduleList = <span class="hljs-keyword">import</span>.meta.globEager(<span class="hljs-string">&#x27;./modules/**&#x27;</span>);<br><span class="hljs-keyword">let</span> routes = <span class="hljs-built_in">Object</span><br>    .keys(moduleList).reduce&lt;<span class="hljs-built_in">any</span>[]&gt;(<span class="hljs-function">(<span class="hljs-params">pre, k</span>) =&gt;</span> [...pre, ...moduleList[k].default], []);<br><span class="hljs-comment">// 去重</span><br>routes = <span class="hljs-built_in">Array</span>.from(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Set</span>(routes))<br><span class="hljs-keyword">const</span> routers = createRouter(&#123;<br>    <span class="hljs-attr">history</span>: createWebHashHistory(), <span class="hljs-comment">// 使用URL的hash模式</span><br>    routes,<br>    <span class="hljs-function"><span class="hljs-title">scrollBehavior</span>(<span class="hljs-params">to, <span class="hljs-keyword">from</span>, savedPosition</span>)</span> &#123;<br>        <span class="hljs-comment">// 保存页面滚动的位置</span><br>        <span class="hljs-keyword">if</span> (savedPosition) &#123;<br>            <span class="hljs-keyword">return</span> savedPosition<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> &#123; <span class="hljs-attr">top</span>: <span class="hljs-number">0</span> &#125;<br>        &#125;<br>    &#125;<br>&#125;);<br><span class="hljs-comment">// 全局路由守卫</span><br>routers.beforeEach(<span class="hljs-function">(<span class="hljs-params">to, <span class="hljs-keyword">from</span>, next</span>) =&gt;</span> &#123;<br>    next();<br>&#125;)<br><span class="hljs-comment">// 后置守卫</span><br>routers.afterEach(<span class="hljs-function">(<span class="hljs-params">to, <span class="hljs-keyword">from</span>, failure</span>) =&gt;</span> &#123;<br>  <span class="hljs-comment">// todo</span><br>&#125;);<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> routers;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;!-- HelloWord.vue --&gt;<br>&lt;template&gt;<br>  &lt;div class=&quot;main&quot;&gt;Hello World&lt;/div&gt;<br>&lt;/template&gt;<br>&lt;script setup lang=&quot;ts&quot;&gt;&lt;/script&gt;<br>&lt;style scoped lang=&quot;scss&quot;&gt;<br>.main &#123;<br>  margin-top: 300px;<br>  font-size: 24px;<br>  text-align: center;<br>&#125;<br>&lt;/style&gt;<br><br></code></pre></td></tr></table></figure><p>新建router/modules/helloWord.ts配置页面的路由参数</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-comment">//helloWord.ts</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> [<br>  &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/helloWord&quot;</span>,<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;helloWord&quot;</span>,<br>    <span class="hljs-comment">// 路由懒加载页面</span><br>    <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&quot;@/views/HelloWord.vue&quot;</span>),<br>    <span class="hljs-comment">// redirect: &quot;/home&quot;,</span><br>    <span class="hljs-attr">meta</span>: &#123;<br>      <span class="hljs-comment">// 页面是否缓存</span><br>      <span class="hljs-attr">keepAlive</span>: <span class="hljs-literal">true</span>,<br>    &#125;,<br>  &#125;,<br>];<br></code></pre></td></tr></table></figure><p>这里的路径用到了别名@，代表src目录下<br>别名可以这样设置，在vite.config.ts</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-comment">//vite.config.ts</span><br><span class="hljs-keyword">import</span> path <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;path&quot;</span>;<br>  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> defineConfig(&#123;<br>  <span class="hljs-attr">plugins</span>: [vue()],<br>  <span class="hljs-comment">// 配置别名</span><br>  <span class="hljs-attr">resolve</span>: &#123;<br>    <span class="hljs-attr">alias</span>: &#123;<br>      <span class="hljs-string">&quot;@&quot;</span>: path.resolve(__dirname, <span class="hljs-string">&quot;src&quot;</span>),<br>    &#125;,<br>  &#125;,<br>&#125;);<br><br></code></pre></td></tr></table></figure><p>使用keep-alive缓存页面防止后退页面时的重新渲染。上面路由配置内meta添加了属性keepAlive参数控制该页面是否缓存<br>所以App.vue添加如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;keep-alive v-if=&quot;$route.meta.keepAlive&quot;&gt;<br>    &lt;router-view&gt;&lt;/router-view&gt;<br>  &lt;/keep-alive&gt;<br>  &lt;router-view v-else&gt;&lt;/router-view&gt;<br>&lt;/template&gt;<br></code></pre></td></tr></table></figure><p>main.ts中引入router</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-comment">// main.ts</span><br><span class="hljs-keyword">import</span> &#123; createApp &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;<br><span class="hljs-keyword">import</span> App <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./App.vue&quot;</span>;<br><span class="hljs-keyword">import</span> router <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@/router&quot;</span>;<br><br><span class="hljs-keyword">const</span> app = createApp(App);<br>app.use(router);<br>app.mount(<span class="hljs-string">&quot;#app&quot;</span>);<br></code></pre></td></tr></table></figure><p>浏览器输入路由localhost:3000/#/helloWord 就可以访问到HelloWord页面了。</p><blockquote><p>router的使用可参考官网文档<a href="https://router.vuejs.org/zh/">vue-router</a></p></blockquote>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>使用vite搭建vue3项目</title>
    <link href="/2022/03/27/%E4%BD%BF%E7%94%A8vite%E6%90%AD%E5%BB%BAvue3%E9%A1%B9%E7%9B%AE/"/>
    <url>/2022/03/27/%E4%BD%BF%E7%94%A8vite%E6%90%AD%E5%BB%BAvue3%E9%A1%B9%E7%9B%AE/</url>
    
    <content type="html"><![CDATA[<blockquote></blockquote><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gauss"><span class="hljs-meta"># 输入创建命令</span><br>yarn <span class="hljs-keyword">create</span> vite<br></code></pre></td></tr></table></figure><p>命令行选择框架vue</p><p>选择语言vue-ts<br><img src="./%E4%BD%BF%E7%94%A8vite%E6%90%AD%E5%BB%BAvue3%E9%A1%B9%E7%9B%AE/create1.png"></p><p>项目创建成功</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>vue3项目集成Prettier+ESlint+stylelint</title>
    <link href="/2022/03/27/vue3%E9%A1%B9%E7%9B%AE%E9%9B%86%E6%88%90Prettier-ESlint-stylelint/"/>
    <url>/2022/03/27/vue3%E9%A1%B9%E7%9B%AE%E9%9B%86%E6%88%90Prettier-ESlint-stylelint/</url>
    
    <content type="html"><![CDATA[<h2 id="创建vue3项目"><a href="#创建vue3项目" class="headerlink" title="创建vue3项目"></a>创建vue3项目</h2><p>项目建立好之后的首件事我们应该是做好代码规范、格式的制定及约束，eslint、stylelint先集成到项目中去，以免后续的封装改动成本过大。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-comment"># 输入创建命令</span><br><span class="hljs-attribute">yarn</span> create vite<span class="hljs-meta"> [项目名称]</span><br><br></code></pre></td></tr></table></figure><blockquote><p>在命令行选择vue项目框架<br>选择vue-ts</p></blockquote><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs vala">cd [项目名称]<br><span class="hljs-meta"># 下载项目依赖</span><br>yarn<br><span class="hljs-meta"># 启动</span><br>yarn dev<br></code></pre></td></tr></table></figure><p>搭建成功</p><h2 id="安装ESlint"><a href="#安装ESlint" class="headerlink" title="安装ESlint"></a>安装ESlint</h2><blockquote><p>负责 js/ts 文件代码检查、修复，文档详见 官网</p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs csharp">yarn <span class="hljs-keyword">add</span> --dev eslint<br>yarn eslint --<span class="hljs-keyword">init</span> <span class="hljs-comment">// 初始化eslint配置文件</span><br></code></pre></td></tr></table></figure><p>按照需求选择选择对应的选项</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs less">您想如何使用<span class="hljs-selector-tag">ESLint</span>?<br>? <span class="hljs-selector-tag">How</span> <span class="hljs-selector-tag">would</span> <span class="hljs-selector-tag">you</span> <span class="hljs-selector-tag">like</span> <span class="hljs-selector-tag">to</span> <span class="hljs-selector-tag">use</span> <span class="hljs-selector-tag">ESLint</span>?<br><span class="hljs-selector-tag">To</span> <span class="hljs-selector-tag">check</span> <span class="hljs-selector-tag">syntax</span>, <span class="hljs-selector-tag">find</span> <span class="hljs-selector-tag">problems</span>, <span class="hljs-selector-tag">and</span> <span class="hljs-selector-tag">enforce</span> <span class="hljs-selector-tag">code</span> <span class="hljs-selector-tag">style</span><br> <br>您的项目使用什么类型的模块?<br>? <span class="hljs-selector-tag">What</span> <span class="hljs-selector-tag">type</span> <span class="hljs-selector-tag">of</span> <span class="hljs-selector-tag">modules</span> <span class="hljs-selector-tag">does</span> <span class="hljs-selector-tag">your</span> <span class="hljs-selector-tag">project</span> <span class="hljs-selector-tag">use</span>?<br><span class="hljs-selector-tag">JavaScript</span> <span class="hljs-selector-tag">modules</span> (import/export)<br> <br>您的项目使用哪个框架?<br>? <span class="hljs-selector-tag">Which</span> <span class="hljs-selector-tag">framework</span> <span class="hljs-selector-tag">does</span> <span class="hljs-selector-tag">your</span> <span class="hljs-selector-tag">project</span> <span class="hljs-selector-tag">use</span>?<br><span class="hljs-selector-tag">None</span> <span class="hljs-selector-tag">of</span> <span class="hljs-selector-tag">these</span><br> <br>你的代码在哪里运行?(按&lt;space&gt;选择，&lt;a&gt;切换所有，&lt;i&gt;反转选择)<br>? <span class="hljs-selector-tag">Where</span> <span class="hljs-selector-tag">does</span> <span class="hljs-selector-tag">your</span> <span class="hljs-selector-tag">code</span> <span class="hljs-selector-tag">run</span>? (Press &lt;space&gt; to select, &lt;a&gt; to toggle all, &lt;i&gt; to invert selection)<br><span class="hljs-selector-tag">Node</span><br> <br>您想如何为您的项目定义一个样式?<br>? <span class="hljs-selector-tag">How</span> <span class="hljs-selector-tag">would</span> <span class="hljs-selector-tag">you</span> <span class="hljs-selector-tag">like</span> <span class="hljs-selector-tag">to</span> <span class="hljs-selector-tag">define</span> <span class="hljs-selector-tag">a</span> <span class="hljs-selector-tag">style</span> <span class="hljs-selector-tag">for</span> <span class="hljs-selector-tag">your</span> <span class="hljs-selector-tag">project</span>?<br><span class="hljs-selector-tag">Use</span> <span class="hljs-selector-tag">a</span> <span class="hljs-selector-tag">popular</span> <span class="hljs-selector-tag">style</span> <span class="hljs-selector-tag">guide</span><br> <br>您想遵循哪种风格指南?<br>? <span class="hljs-selector-tag">Which</span> <span class="hljs-selector-tag">style</span> <span class="hljs-selector-tag">guide</span> <span class="hljs-selector-tag">do</span> <span class="hljs-selector-tag">you</span> <span class="hljs-selector-tag">want</span> <span class="hljs-selector-tag">to</span> <span class="hljs-selector-tag">follow</span>?<br><span class="hljs-selector-tag">Airbnb</span> (<span class="hljs-attribute">https</span>:<span class="hljs-comment">//github.com/airbnb/javascript)</span><br> <br>您希望配置文件的格式是什么?<br>? What format do you want your config file to be in?<br>JavaScript<br> <br>Checking peerDependencies of eslint-config-airbnb-base<span class="hljs-variable">@latest</span><br>您所选择的配置需要以下依赖项:<br>The config that you&#x27;ve selected requires the following <span class="hljs-attribute">dependencies</span>:<br>eslint-config-airbnb-base<span class="hljs-variable">@latest</span> eslint@^<span class="hljs-number">4.19</span>.<span class="hljs-number">1</span> || ^<span class="hljs-number">5.3</span>.<span class="hljs-number">0</span> eslint-plugin-import@^<span class="hljs-number">2.14</span>.<span class="hljs-number">0</span><br>您想现在用npm安装它们吗?<br>? Would you like to install them now with npm?<br>Yes<br></code></pre></td></tr></table></figure><blockquote><p>安装完成之后就可以手动执行yarn eslint lint命令对代码进行检查格式是否符合规范，同时可以加上–fix参数进行自动修复。<br>我们再加上vscode的插件可以实现实时编码时的格式检查/报错提示,以及保存代码时的自动格式修复。<br>在vscode插件仓库安装eslint插件。安装完之后我们编辑代码就会有对应的代码格式报错了，但还不能实现自动保存格式化代码。<br>需要在vscode的setting.json中配置如下</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs json"># 可以通过下面配置做一些禁用操作。<br>&#123;<br>  <span class="hljs-attr">&quot;editor.codeActionsOnSave&quot;</span>: &#123;<br>    <span class="hljs-attr">&quot;source.fixAll&quot;</span>: <span class="hljs-literal">false</span>,  <span class="hljs-comment">//默认true保存的时候会执行所有的lint,可能会有时间消耗</span><br>    <span class="hljs-attr">&quot;source.fixAll.eslint&quot;</span>: <span class="hljs-literal">true</span> <span class="hljs-comment">// 仅仅支持eslint</span><br>  &#125;<br>&#125;<br># 也可以通过editor.codeActionsOnSaveTimeout可以配置一些自动保存时间，默认<span class="hljs-number">750</span>ms。<br></code></pre></td></tr></table></figure><p>需要注意的是，需要关闭一些tslint的遗留配置，可能会影响到eslint，或者是vetur的格式化配置，假如没有遇到这些问题可以忽略。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>  <span class="hljs-comment">// 关闭js/ts的默认format,统一用eslint进行格式化</span><br>  <span class="hljs-attr">&quot;javascript.format.enable&quot;</span>: <span class="hljs-literal">false</span>,<br>  <span class="hljs-attr">&quot;typescript.format.enable&quot;</span>: <span class="hljs-literal">false</span>,<br>  <span class="hljs-comment">// 关闭vetur的js/ts/html的formatter。html用eslint-plugin-vue格式化。</span><br>  <span class="hljs-comment">// js/ts程序用eslint，防止vetur中的prettier与eslint格式化冲突</span><br>  <span class="hljs-attr">&quot;vetur.format.defaultFormatter.html&quot;</span>: <span class="hljs-string">&quot;none&quot;</span>,<br>  <span class="hljs-attr">&quot;vetur.format.defaultFormatter.js&quot;</span>: <span class="hljs-string">&quot;none&quot;</span>,<br>  <span class="hljs-attr">&quot;vetur.format.defaultFormatter.ts&quot;</span>: <span class="hljs-string">&quot;none&quot;</span>,<br>&#125;<br><br></code></pre></td></tr></table></figure><p>配置之后vscode在<code>ctrl+s</code>保存时就能自动格式化代码了，无需再使用<code>ctrl+shift+f</code>手动格式化。<br>不过这样子的配置在多人合作开发中比较麻烦，不能保证项目组每个人都对vscode作了类似的配置以保证eslint的正常工作，<br>所以我们有一个方案，项目组都使用vscode时，在项目的根目录新建一个.vscode文件夹，里面放入<code>extensions.json</code> 、<code>launch.json</code> 和<code>settings.json</code> 三个文件.<br>还有其他的文件配置，可以查看<a href="https://code.visualstudio.com/docs/editor/extension-marketplace">.vscode</a></p><p>extensions.json配置</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>  <span class="hljs-attr">&quot;recommendations&quot;</span>: [<br>    <span class="hljs-string">&quot;johnsoncodehk.volar&quot;</span>,<br>    <span class="hljs-string">&quot;dbaeumer.vscode-eslint&quot;</span>,<br>  ]<br>&#125;<br></code></pre></td></tr></table></figure><p>launch.json：配置调试程序，主要用作debugger，具体配置可查看在 <a href="https://cn.vuejs.org/v2/cookbook/debugging-in-vscode.html">VS Code 中调试 — Vue.js</a></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>  <span class="hljs-attr">&quot;version&quot;</span>: <span class="hljs-string">&quot;0.1.0&quot;</span>,<br>  <span class="hljs-attr">&quot;configurations&quot;</span>: [<br>    &#123;<br>      <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;chrome&quot;</span>,<br>      <span class="hljs-attr">&quot;request&quot;</span>: <span class="hljs-string">&quot;launch&quot;</span>,<br>      <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;Launch Chrome&quot;</span>,<br>      <span class="hljs-attr">&quot;url&quot;</span>: <span class="hljs-string">&quot;http://localhost:3000&quot;</span>,<br>      <span class="hljs-attr">&quot;webRoot&quot;</span>: <span class="hljs-string">&quot;$&#123;workspaceFolder&#125;/src&quot;</span>,<br>      <span class="hljs-attr">&quot;sourceMaps&quot;</span>: <span class="hljs-literal">true</span><br>    &#125;<br>  ]<br>&#125;<br></code></pre></td></tr></table></figure><p>settings.json: 覆盖vscode全局配置</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>  <span class="hljs-attr">&quot;typescript.tsdk&quot;</span>: <span class="hljs-string">&quot;./node_modules/typescript/lib&quot;</span>,<br>  <span class="hljs-attr">&quot;npm.packageManager&quot;</span>: <span class="hljs-string">&quot;pnpm&quot;</span>,<br>  <span class="hljs-attr">&quot;editor.tabSize&quot;</span>: <span class="hljs-number">2</span>,<br>  <span class="hljs-attr">&quot;editor.codeActionsOnSave&quot;</span>: &#123;<br>    <span class="hljs-attr">&quot;source.fixAll.eslint&quot;</span>: <span class="hljs-literal">true</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>完成上面的配置之后，已较为完美的统一相关配置。</p><h2 id="Prettier"><a href="#Prettier" class="headerlink" title="Prettier"></a>Prettier</h2><ul><li>ESLint主要负责: 质量检查(例如使用了某个变量却忘记了定义)、风格检查</li><li>Prettier主要负责: 风格检查, 没有质量检查<blockquote><p><a href="https://prettier.io/">prettier官网</a><br>需要注意一点，由于会出现引入多个风格检查的插件和配置的lint，会导致存在的部分与prettier的lint出现冲突。因此需要lint预设包<code>eslint-config-prettier</code>，<br>这个包的作用是先关闭这些与prettier冲突的lint规则，然后之后再启用prettier的规则，使得冲突的lint规则以prettier为准<br><code>eslint-config-prettier</code><a href="https://github.com/prettier/eslint-config-prettier">配置文档</a><br>配置时，需要把p<code>rettier</code>和<code>plugin:prettier/recommended</code>放到<code>extends</code>的最后</p></blockquote></li></ul><h2 id="配置ESlint"><a href="#配置ESlint" class="headerlink" title="配置ESlint"></a>配置ESlint</h2><p>eslint的规则我们可以参照官网文档定制适合自己团队的规则，也可以使用一些常见的开源规则标准，比如常见的像airbnb，standard这些，这些配置可以当做一个基础配置。</p><ul><li><a href="https://www.npmjs.com/package/eslint-config-airbnb">eslint-config-airbnb</a></li><li><a href="https://www.npmjs.com/package/eslint-config-standard">eslint-config-standard</a></li><li><a href="https://www.npmjs.com/package/eslint-config-google">eslint-config-google</a><br>关于上面的标准规则库可以单独下载配置，以airbnb为例<br><code>yarn add --dev eslint-config-airbnb</code><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-comment">//.eslintrc.json</span><br>&#123;<br>  <span class="hljs-attr">&quot;extends&quot;</span>: [<span class="hljs-string">&quot;eslint:recommended&quot;</span>,<span class="hljs-string">&quot;airbnb&quot;</span>] <span class="hljs-comment">// eslint:recommended: 加入eslint默认配置。</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="忽略不需要校验的文件"><a href="#忽略不需要校验的文件" class="headerlink" title="忽略不需要校验的文件"></a>忽略不需要校验的文件</h3>在项目根目录创建一个.eslintignore文件来配置，这个类似于git的.gitignore文件，eslint校验时会忽略它们<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-keyword">public</span>/<br></code></pre></td></tr></table></figure></li></ul><h2 id="让-Prettier-来管理代码"><a href="#让-Prettier-来管理代码" class="headerlink" title="让 Prettier 来管理代码"></a>让 Prettier 来管理代码</h2><p>安装prettier依赖<br><code>yarn add --dev prettier eslint-plugin-prettier eslint-config-prettier</code><br>在项目根目录新建<code>prettier.config.js</code>文件，总共22个配置<a href="https://prettier.io/docs/en/options.html">Prettier配置参数说明</a><br>注意，配置文件是js格式时只能用<code>module.exports = &#123;&#125;</code>, 而不能用es6的<code>export default &#123;&#125;</code>。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-comment">// prettier.config.json</span><br>&#123;<br>  <span class="hljs-attr">&quot;singleQuote&quot;</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 使用单引号 </span><br>  <span class="hljs-attr">&quot;tabWidth&quot;</span>: <span class="hljs-number">2</span>, <span class="hljs-comment">// 一个 tab 键缩进相当于 2 个空格 </span><br>  <span class="hljs-attr">&quot;useTabs&quot;</span>: <span class="hljs-literal">false</span>, <span class="hljs-comment">// 行缩进使用 tab 键代替空格 </span><br>  <span class="hljs-attr">&quot;semi&quot;</span>: <span class="hljs-literal">false</span>, <span class="hljs-comment">// 语句的末尾加上分号 </span><br>  <span class="hljs-attr">&quot;trailingComma&quot;</span>: <span class="hljs-string">&quot;all&quot;</span>, <span class="hljs-comment">// 不用在多行的逗号分隔的句法结构的最后一行的末尾加上逗号 </span><br>  <span class="hljs-attr">&quot;printWidth&quot;</span>: <span class="hljs-number">120</span>, <span class="hljs-comment">// 单行代码超出 120 个字符自动换行 </span><br>  ...<br><br>&#125;<br><br></code></pre></td></tr></table></figure><p>可以通过<code>npx prettier --write .</code>来格式化代码</p><p>添加<code>.prettierignore</code>文件来忽略不需要检查的文件</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-regexp">/dist/</span>*<br>.local<br>.output.js<br><span class="hljs-regexp">/node_modules/</span>**<br>**<span class="hljs-comment">/*.svg</span><br><span class="hljs-comment">**/</span>*.sh<br><span class="hljs-regexp">/public/</span>*<br></code></pre></td></tr></table></figure><h2 id="prettier配合eslint"><a href="#prettier配合eslint" class="headerlink" title="prettier配合eslint"></a>prettier配合eslint</h2><p><code>eslint-config-prettier</code> 的作用是使用 Prettier 默认推荐配置，并且关闭 eslint 自身的格式化功能，防止 Prettier 和 ESLint 的自动格式化的冲突，主要解决配置冲突的，解决冲突的思路就是通过将这个包提供的扩展放到 extends 最后面引入，依据 rules 生效的优先级，所以它会覆盖前面起冲突的规则</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js">&#123;<br>  <span class="hljs-attr">parser</span>: <span class="hljs-string">&#x27;vue-eslint-parser&#x27;</span>,<br>  <span class="hljs-attr">parserOptions</span>: &#123;<br>    <span class="hljs-attr">parser</span>: <span class="hljs-string">&#x27;@typescript-eslint/parser&#x27;</span>, <br>    <span class="hljs-attr">sourceType</span>: <span class="hljs-string">&#x27;module&#x27;</span>,<br>  &#125;,<br>  <span class="hljs-attr">extends</span>: [<br>    <span class="hljs-string">&#x27;plugin:vue/vue3-recommended&#x27;</span>, <span class="hljs-comment">// vue3 基础配置</span><br>    <span class="hljs-string">&#x27;airbnb&#x27;</span> <span class="hljs-comment">// 可以加入airbnb的规则</span><br>    <span class="hljs-string">&#x27;plugin:@typescript-eslint/recommended&#x27;</span>, <span class="hljs-comment">// ts配置</span><br>    <span class="hljs-string">&#x27;prettier&#x27;</span>, <span class="hljs-comment">// prettier</span><br>    <span class="hljs-string">&#x27;plugin:prettier/recommended&#x27;</span>, <span class="hljs-comment">// 合并eslint-plugin-prettier和eslint-config-prettier 配置</span><br>  ],<br>&#125;<br></code></pre></td></tr></table></figure><p>最后设置vscode的保存自动格式化功能，在vscode插件市场安装<code>prettier eslint</code>插件就可以了</p><blockquote><p>若不能自动格式化，vscode的控制台 output输出一栏有eslint服务的日志，可在这里调试查看报错原因。一般出现一些依赖包缺失或者配置文件格式问题。</p></blockquote><h2 id="配置StyleLint"><a href="#配置StyleLint" class="headerlink" title="配置StyleLint"></a>配置StyleLint</h2><p><a href="https://stylelint.io/">StyleLint</a>是针对于类css文件的静态检查和格式化，避免样式文件的错误及代码风格。<br>安装配置<br><code>yarn add --dev stylelint stylelint-config-recommended stylelint-order</code><br>我这里使用了scss，安装scss依赖<code>yarn add --dev sass sass-loader stylelint-config-standard-scss</code><br>这里用到的插件有</p><ol><li><code>stylelint</code></li><li><code>stylelint-config-standard</code>: stylelint官方共享的标准规则集成。里面包括了 <a href="https://github.com/necolas/idiomatic-css">Google’s CSS Style Guide</a>、<a href="https://github.com/airbnb/css">Airbnb’s Styleguide</a>、<a href="https://github.com/necolas/idiomatic-css">The Idiomatic CSS Principles</a>以及<a href="https://codeguide.co/">@mdo’s Code Guide</a>标准规则库。</li><li><code>stylelint-order</code>：用于规范样式属性写作顺序的插件.</li><li><code>stylelint-config-prettier</code> : 禁用所有与格式相关的 Stylelint 规则，解决 prettier 与 stylelint 规则冲突，确保将其放在 extends 队列最后，这样它将覆盖其他配置。</li></ol><p>在跟目录创建<code>.stylelintrc.json</code>配置文件,添加配置如下所示</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>  <span class="hljs-attr">&quot;root&quot;</span>: <span class="hljs-literal">true</span>,<br>  <span class="hljs-attr">&quot;plugins&quot;</span>: [<span class="hljs-string">&quot;stylelint-order&quot;</span>],<br>  <span class="hljs-attr">&quot;extends&quot;</span>: [<span class="hljs-string">&quot;stylelint-config-standard&quot;</span>, <span class="hljs-string">&quot;stylelint-config-prettier&quot;</span>],<br>  <span class="hljs-attr">&quot;rules&quot;</span>: &#123;<br>    <span class="hljs-attr">&quot;selector-class-pattern&quot;</span>: <span class="hljs-literal">null</span>,<br>    <span class="hljs-attr">&quot;selector-pseudo-class-no-unknown&quot;</span>: [<br>      <span class="hljs-literal">true</span>,<br>      &#123;<br>        <span class="hljs-attr">&quot;ignorePseudoClasses&quot;</span>: [<span class="hljs-string">&quot;global&quot;</span>],<br>      &#125;,<br>    ],<br>    <span class="hljs-attr">&quot;selector-pseudo-element-no-unknown&quot;</span>: [<br>      <span class="hljs-literal">true</span>,<br>      &#123;<br>        <span class="hljs-attr">&quot;ignorePseudoElements&quot;</span>: [<span class="hljs-string">&quot;v-deep&quot;</span>],<br>      &#125;,<br>    ],<br>    <span class="hljs-attr">&quot;at-rule-no-unknown&quot;</span>: [<span class="hljs-comment">// 由于自己大量的样式都是用sass语言编写，里面用到的部分语法例如@extend会报错，因为不是css中的语法。</span><br>      <span class="hljs-literal">true</span>,<br>      &#123;<br>        <span class="hljs-attr">&quot;ignoreAtRules&quot;</span>: [<br>          <span class="hljs-string">&quot;apply&quot;</span>,<br>          <span class="hljs-string">&quot;variants&quot;</span>,<br>          <span class="hljs-string">&quot;responsive&quot;</span>,<br>          <span class="hljs-string">&quot;screen&quot;</span>,<br>          <span class="hljs-string">&quot;function&quot;</span>,<br>          <span class="hljs-string">&quot;if&quot;</span>,<br>          <span class="hljs-string">&quot;each&quot;</span>,<br>          <span class="hljs-string">&quot;include&quot;</span>,<br>          <span class="hljs-string">&quot;mixin&quot;</span>,<br>        ],<br>      &#125;,<br>    ],<br>  &#125;,<br><br>  <span class="hljs-attr">&quot;ignoreFiles&quot;</span>: [<span class="hljs-string">&quot;**/*.js&quot;</span>, <span class="hljs-string">&quot;**/*.jsx&quot;</span>, <span class="hljs-string">&quot;**/*.tsx&quot;</span>, <span class="hljs-string">&quot;**/*.ts&quot;</span>],<br>  <span class="hljs-attr">&quot;overrides&quot;</span>: [ <span class="hljs-comment">// 特殊文件的配置</span><br>    &#123;<br>      <span class="hljs-attr">&quot;files&quot;</span>: [<span class="hljs-string">&quot;*.vue&quot;</span>, <span class="hljs-string">&quot;**/*.vue&quot;</span>, <span class="hljs-string">&quot;*.html&quot;</span>, <span class="hljs-string">&quot;**/*.html&quot;</span>],<br>      <span class="hljs-attr">&quot;extends&quot;</span>: [<span class="hljs-string">&quot;stylelint-config-recommended&quot;</span>, <span class="hljs-string">&quot;stylelint-config-html&quot;</span>],<br>      <span class="hljs-attr">&quot;rules&quot;</span>: &#123;<br>        <span class="hljs-attr">&quot;keyframes-name-pattern&quot;</span>: <span class="hljs-literal">null</span>,<br>        <span class="hljs-attr">&quot;selector-pseudo-class-no-unknown&quot;</span>: [ <span class="hljs-comment">// 解决vue提供的 v-deep v-global语法的报错</span><br>          <span class="hljs-literal">true</span>,<br>          &#123;<br>            <span class="hljs-attr">&quot;ignorePseudoClasses&quot;</span>: [<span class="hljs-string">&quot;deep&quot;</span>, <span class="hljs-string">&quot;global&quot;</span>],<br>          &#125;,<br>        ],<br>        <span class="hljs-attr">&quot;selector-pseudo-element-no-unknown&quot;</span>: [<br>          <span class="hljs-literal">true</span>,<br>          &#123;<br>            <span class="hljs-attr">&quot;ignorePseudoElements&quot;</span>: [<span class="hljs-string">&quot;v-deep&quot;</span>, <span class="hljs-string">&quot;v-global&quot;</span>, <span class="hljs-string">&quot;v-slotted&quot;</span>],<br>          &#125;,<br>        ],<br>      &#125;,<br>    &#125;,<br>  ],<br>&#125;<br></code></pre></td></tr></table></figure><p>安装vscode的stylelint插件<br>安装官方提供的<code>stylelint</code>插件，和<code>stylelint-stzhang</code>插件，此插件用来解决自动保存功能的还有错误提示。<br><code>yarn add --dev stylelint-config-standard</code><br>stylelint插件我安装0.87.6版本，最新版不会根据配置文件提示报错。<br>vscode的settings.json文件中配置</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>  <span class="hljs-attr">&quot;stylelint.enable&quot;</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 默认 true</span><br>  <span class="hljs-attr">&quot;stylelint.autoFix&quot;</span>: <span class="hljs-literal">true</span>,<br>&#125;<br></code></pre></td></tr></table></figure><p>完成以上安装配置就能够自动修复代码了。</p><!-- >注意：安装的 stylelint 和 VSCode Stylelint 插件版本太新，stylelint v14 及以上版本不兼容 vue3。所以可能会出现配置之后不能格式化的问题，还有可能出现类似Unknown word (CssSyntaxError)Stylelint(CssSyntaxError) 这样的报错，这些问题都是因为14版本太新导致的，具体原因官网有说明：[github.com/stylelint/s…](https://github.com/stylelint/stylelint/blob/14.0.0/docs/migration-guide/to-14.md#syntax-option-and-automatic-inferral-of-syntax)这里我使用`"stylelint": "^13.13.1"`版本, --><p>一个编辑器里对某个类型的文件有多个Formatter（格式化执行者），是一定会打架的。所以需要一些配置。<br>Save时格式化：下面的json型设置需要写到setting.json里,详情可看<a href="https://code.visualstudio.com/docs/getstarted/settings#_settings-file-locations">Visual Studio Code User and Workspace Settings</a></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-comment">// 保存时使用VSCode 自身格式化程序格式化，触发自动保存机制。</span><br><span class="hljs-string">&quot;editor.formatOnSave&quot;</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">// *重要</span><br><br><span class="hljs-comment">// 开启eslint格式化</span><br><span class="hljs-string">&quot;eslint.format.enable&quot;</span>: <span class="hljs-literal">true</span>,<br><br><span class="hljs-comment">// 显示eslint状态</span><br><span class="hljs-string">&quot;eslint.alwaysShowStatus&quot;</span>: <span class="hljs-literal">true</span>,<br><br><span class="hljs-comment">// 默认格式化走prettier</span><br><span class="hljs-string">&quot;editor.defaultFormatter&quot;</span>: <span class="hljs-string">&quot;esbenp.prettier-vscode&quot;</span>, <span class="hljs-comment">// *重要</span><br><br><span class="hljs-comment">// 开启stylelint校验</span><br><span class="hljs-string">&quot;stylelint.enable&quot;</span>: <span class="hljs-literal">true</span>,<br><br><span class="hljs-comment">// 自动保存触发stylelint</span><br><span class="hljs-string">&quot;stylelint.autoFix&quot;</span>: <span class="hljs-literal">true</span> <span class="hljs-comment">// *重要</span><br><br><span class="hljs-comment">// 各种文件格式化规则</span><br><span class="hljs-string">&quot;[javascriptreact]&quot;</span>: &#123;<br>  <span class="hljs-attr">&quot;editor.defaultFormatter&quot;</span>: <span class="hljs-string">&quot;esbenp.prettier-vscode&quot;</span><br>&#125;,<br><span class="hljs-string">&quot;[typescript]&quot;</span>: &#123;<br>  <span class="hljs-attr">&quot;editor.defaultFormatter&quot;</span>: <span class="hljs-string">&quot;esbenp.prettier-vscode&quot;</span><br>&#125;,<br><span class="hljs-string">&quot;[typescriptreact]&quot;</span>: &#123;<br>  <span class="hljs-attr">&quot;editor.defaultFormatter&quot;</span>: <span class="hljs-string">&quot;esbenp.prettier-vscode&quot;</span><br>&#125;,<br><span class="hljs-string">&quot;[html]&quot;</span>: &#123;<br>  <span class="hljs-attr">&quot;editor.defaultFormatter&quot;</span>: <span class="hljs-string">&quot;esbenp.prettier-vscode&quot;</span><br>&#125;,<br><span class="hljs-string">&quot;[css]&quot;</span>: &#123;<br>  <span class="hljs-attr">&quot;editor.defaultFormatter&quot;</span>: <span class="hljs-string">&quot;esbenp.prettier-vscode&quot;</span><br>&#125;,<br><span class="hljs-string">&quot;[less]&quot;</span>: &#123;<br>  <span class="hljs-attr">&quot;editor.defaultFormatter&quot;</span>: <span class="hljs-string">&quot;esbenp.prettier-vscode&quot;</span><br>&#125;,<br><span class="hljs-string">&quot;[scss]&quot;</span>: &#123;<br>  <span class="hljs-attr">&quot;editor.defaultFormatter&quot;</span>: <span class="hljs-string">&quot;esbenp.prettier-vscode&quot;</span><br>&#125;,<br><span class="hljs-string">&quot;[markdown]&quot;</span>: &#123;<br>  <span class="hljs-attr">&quot;editor.defaultFormatter&quot;</span>: <span class="hljs-string">&quot;esbenp.prettier-vscode&quot;</span><br>&#125;,<br><br><span class="hljs-string">&quot;editor.codeActionsOnSave&quot;</span>: &#123;<br>  <span class="hljs-attr">&quot;source.fixAll.eslint&quot;</span>: <span class="hljs-literal">true</span><br>&#125;,<br><span class="hljs-string">&quot;[vue]&quot;</span>: &#123;<br>  <span class="hljs-attr">&quot;editor.codeActionsOnSave&quot;</span>: &#123;<br>    <span class="hljs-attr">&quot;source.fixAll.eslint&quot;</span>: <span class="hljs-literal">false</span><br>  &#125;<br>&#125;,<br><br><span class="hljs-comment">// 两者会在格式化js时冲突，所以需要关闭默认js格式化程序 </span><br><span class="hljs-string">&quot;javascript.format.enable&quot;</span>: <span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure><p>另外vscode需要安装<code>Prettier-Code formatter</code> 插件，否则<code>esbenp.prettier-vscode</code>配置会报找不到插件的错误，导致配置不生效</p><h2 id="vscode-的格式化程序和插件"><a href="#vscode-的格式化程序和插件" class="headerlink" title="vscode 的格式化程序和插件"></a>vscode 的格式化程序和插件</h2><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-comment">// 代表默认格式js程序是否开启，默认开启。用eslint格式化js时需要设置为false</span><br><span class="hljs-string">&quot;javascript.format.enable&quot;</span>: <span class="hljs-literal">true</span> <br></code></pre></td></tr></table></figure><h3 id="Vetur"><a href="#Vetur" class="headerlink" title="Vetur"></a>Vetur</h3><p>用于在 vue 单文件中展示不同语言，有<code>格式化</code>、<code>展示</code>、<code>高亮</code>等能力，安装即默认开启格式化，<code>vetur</code> 还内置了<code>prettier</code>和 <code>eslint</code> 的能力。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-comment">// 关闭vetur格式化程序 ，防止和eslint冲突</span><br><span class="hljs-string">&quot;vetur.format.defaultFormatter.js&quot;</span>: <span class="hljs-string">&quot;none&quot;</span>,<br><span class="hljs-string">&quot;vetur.format.defaultFormatter.html&quot;</span>: <span class="hljs-string">&quot;none&quot;</span>,<br><span class="hljs-string">&quot;vetur.format.defaultFormatter.ts&quot;</span>: <span class="hljs-string">&quot;none&quot;</span>,<br><span class="hljs-string">&quot;vetur.validation.script&quot;</span>: <span class="hljs-literal">false</span>,<br><span class="hljs-string">&quot;vetur.validation.template&quot;</span>: <span class="hljs-literal">false</span>,<br></code></pre></td></tr></table></figure><h3 id="Volar"><a href="#Volar" class="headerlink" title="Volar"></a>Volar</h3><p>vue的二代插件,支持vue3，除了集成了vetur的相关功能，如<code>高亮</code>、<code>语法提示</code>等。当然还很多其他强大的功能，可以参考官方文档。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-comment">// 关闭volar格式化程序 ,加载过慢。</span><br><span class="hljs-string">&quot;editor.codeActionsOnSave&quot;</span>: &#123;<br>  <span class="hljs-attr">&quot;source.fixAll.volar&quot;</span>: <span class="hljs-literal">false</span><br>&#125;,<br></code></pre></td></tr></table></figure><p>项目可以<code>package.json</code>添加命令用于stylelint的全局格式检查和修复</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-string">&quot;stylelint&quot;</span>: <span class="hljs-string">&quot;stylelint \&quot;src/**/*.&#123;css,scss,vue&#125;\&quot;&quot;</span>,<br><span class="hljs-string">&quot;stylefix&quot;</span>: <span class="hljs-string">&quot;stylelint \&quot;src/**/*.&#123;css,scss,vue&#125;\&quot; --fix&quot;</span>,<br></code></pre></td></tr></table></figure><p>执行yarn stylelint 报错，需要安装解析scss相关依赖<br><code>yarn add --dev stylelint-config-html postcss-html postcss-scss</code></p><h2 id="加入pre-commit钩子校验代码"><a href="#加入pre-commit钩子校验代码" class="headerlink" title="加入pre-commit钩子校验代码"></a>加入pre-commit钩子校验代码</h2><p>以上设置了eslint自动修复代码错误以及prettier进行代码格式化，但在开发中难免遇到无法fix的错误代码，可能开发人员忘记修改，那这个时候把代码提交到远程仓库，那将是糟糕的代码。为解决这个问题，我们可以通过git hooks的pre-commit钩子来实现，主要的工具是husky和lint-staged这个两个包。</p><blockquote><p>husky 是一个为 git 客户端增加 hook 的工具。安装后，它会自动在仓库中的 .git/ 目录下增加相应的钩子；比如 pre-commit 钩子就会在你执行 git commit 的触发。<br>lint-staged，一个仅仅过滤出 Git 代码暂存区文件(被 git add 的文件)的工具；这个很实用，因为我们如果对整个项目的代码做一个检查，可能耗时很长，如果是老项目，要对之前的代码做一个代码规范检查并修改的话，特别消耗时间，所以lint-staged对开发者来说比较友好。</p></blockquote><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p><code>yarn add --dev husky lint-staged</code></p><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><p>lint-staged的配置可以配置到package.json中也可以根目录创建配置文件.lintstagedrc</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-comment">// lintstagedrc.json</span><br>&#123;<br>    <span class="hljs-attr">&quot;*.&#123;js,jsx,ts,tsx&#125;&quot;</span>: [<br>      <span class="hljs-string">&quot;eslint --fix&quot;</span>,<br>      <span class="hljs-string">&quot;prettier --write&quot;</span><br>    ],<br>    <span class="hljs-attr">&quot;&#123;!(package)*.json,*.code-snippets,.!(browserslist)*rc&#125;&quot;</span>: [<br>      <span class="hljs-string">&quot;prettier --write--parser json&quot;</span><br>    ],<br>    <span class="hljs-attr">&quot;package.json&quot;</span>: [<br>      <span class="hljs-string">&quot;prettier --write&quot;</span><br>    ],<br>    <span class="hljs-attr">&quot;*.vue&quot;</span>: [<br>      <span class="hljs-string">&quot;eslint --fix&quot;</span>,<br>      <span class="hljs-string">&quot;prettier --write&quot;</span>,<br>      <span class="hljs-string">&quot;stylelint --fix&quot;</span><br>    ],<br>    <span class="hljs-attr">&quot;*.&#123;scss,less,styl,html&#125;&quot;</span>: [<br>      <span class="hljs-string">&quot;stylelint --fix&quot;</span>,<br>      <span class="hljs-string">&quot;prettier --write&quot;</span><br>    ],<br>    <span class="hljs-attr">&quot;*.md&quot;</span>: [<br>      <span class="hljs-string">&quot;prettier --write&quot;</span><br>    ]<br>  &#125;<br></code></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-comment">// package.json</span><br><span class="hljs-string">&quot;scripts&quot;</span>: &#123;<br>  <span class="hljs-attr">&quot;lint&quot;</span>: <span class="hljs-string">&quot;lint-staged&quot;</span><br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="初始化husky"><a href="#初始化husky" class="headerlink" title="初始化husky"></a>初始化husky</h4><p>执行下列命令会在.husky下创建一个pre-commit文件</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs avrasm">yarn husky install <span class="hljs-meta"># 创建.husky文件</span><br>yarn husky <span class="hljs-keyword">add</span> .husky/pre-commit<br></code></pre></td></tr></table></figure><p>接下来在生成的.husky文件夹下的pre-commit 文件写入comiit之前的需要执行的校验代码格式的命令即可实现，校验不成功则不会执行commit</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># pre-commit</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;---代码格式检查开始---&quot;</span><br>yarn lint<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;---检查结束---&quot;</span><br></code></pre></td></tr></table></figure><p>至此大功告成</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote><p>创建vue3+ts项目，使用prettier集成eslint代码检查、stylelint样式格式化，prettier作为中间件控制eslint和stylelint的格式标准，并已此标准检查报错和格式化代码。<br>关闭了vscode本身的代码格式化和Volar的格式化，使用各插件处理解决几种格式化工具之间的冲突。<br>使用husky和lint-staged检查并格式化git暂存区的代码。<br>避免团队成员提交不符合团队规范标准的代码到远程仓库，至此完成了多人合作的项目的代码规范标准化，极大的方便了后续代码维护修改，提高了项目代码的易读性，同时严格规范代码避免垃圾代码侧面的提升了代码性能。</p></blockquote>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>为ReactNative项目添加typescript支持</title>
    <link href="/2021/09/16/%E4%B8%BAReact-Native%E9%A1%B9%E7%9B%AE%E6%B7%BB%E5%8A%A0typescript%E6%94%AF%E6%8C%81/"/>
    <url>/2021/09/16/%E4%B8%BAReact-Native%E9%A1%B9%E7%9B%AE%E6%B7%BB%E5%8A%A0typescript%E6%94%AF%E6%8C%81/</url>
    
    <content type="html"><![CDATA[<h3 id="Ts和Js的区别"><a href="#Ts和Js的区别" class="headerlink" title="Ts和Js的区别"></a>Ts和Js的区别</h3><blockquote><ol><li>ts是静态类语言，可以做到声明即文档，js是动态类语言相对更灵活。</li><li>如用ts写一个button组件可以清晰的知道，ButtonProps如是否必传，可选，style是什么类型，disabled是什么类型，较js，ts更易于维护和拓展，可以做到代码即注释，避免一个月不见</li><li>代码自己都忘记自己写了什么的尴尬，</li><li>ts对比js基础类型上，增加了 void/never/any/元组/枚举/以及一些高级类型</li><li>js没有重载概念，ts有可以重载</li><li>vscode/ide对ts有很友好的提示</li><li>ts更利于重构</li></ol></blockquote><p>TypeScript可以编译生成JS文件，然后供给ReactNative调用<br>话不多说，直接开始吧</p><h5 id="对项目添加TypeScript支持"><a href="#对项目添加TypeScript支持" class="headerlink" title="对项目添加TypeScript支持"></a>对项目添加TypeScript支持</h5><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">npm <span class="hljs-keyword">install</span> typescript -g  <span class="hljs-comment">#全局安装</span><br></code></pre></td></tr></table></figure><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm">yarn <span class="hljs-keyword">add</span> -D typescript  <span class="hljs-meta">#项目根目录安装</span><br></code></pre></td></tr></table></figure><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm">yarn <span class="hljs-keyword">add</span> -g typings  <span class="hljs-meta">#项目添加TypeScript类型支持</span><br></code></pre></td></tr></table></figure><h5 id="根目录添加配置tsconfig-json文件"><a href="#根目录添加配置tsconfig-json文件" class="headerlink" title="根目录添加配置tsconfig.json文件"></a>根目录添加配置tsconfig.json文件</h5><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">tsc <span class="hljs-comment">--init</span><br></code></pre></td></tr></table></figure><p>项目根目录下将会生成tsconfig.json文件<br>按自身需求修改配置内容</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>  <span class="hljs-attr">&quot;compilerOptions&quot;</span>: &#123;<br>      <span class="hljs-attr">&quot;target&quot;</span>: <span class="hljs-string">&quot;es6&quot;</span>,<br>      <span class="hljs-attr">&quot;allowJs&quot;</span>: <span class="hljs-literal">true</span>,<br>      <span class="hljs-attr">&quot;jsx&quot;</span>: <span class="hljs-string">&quot;react&quot;</span>, <span class="hljs-comment">// 这里必须改为react，否则无法识别tsx</span><br>      <span class="hljs-attr">&quot;sourceMap&quot;</span>: <span class="hljs-literal">false</span>,<br>      <span class="hljs-attr">&quot;noImplicitAny&quot;</span>: <span class="hljs-literal">false</span><br>  &#125;,<br>  <span class="hljs-attr">&quot;exclude&quot;</span>: [<br>      <span class="hljs-string">&quot;node_modules&quot;</span><br>  ],<br>  <span class="hljs-attr">&quot;paths&quot;</span>: &#123;<br>      <span class="hljs-attr">&quot;@/*&quot;</span>:[<span class="hljs-string">&quot;src/*&quot;</span>] <span class="hljs-comment">// 这里是目录别名 @代表src目录</span><br>    &#125;, <br>&#125;<br></code></pre></td></tr></table></figure><h5 id="添加相应的React库到TypeScript中，不然tsx代码中将不能使用相关模块"><a href="#添加相应的React库到TypeScript中，不然tsx代码中将不能使用相关模块" class="headerlink" title="添加相应的React库到TypeScript中，不然tsx代码中将不能使用相关模块"></a>添加相应的React库到TypeScript中，不然tsx代码中将不能使用相关模块</h5><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">yarn <span class="hljs-builtin-name">add</span> -D typescript<br></code></pre></td></tr></table></figure><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs aspectj">yarn add -D <span class="hljs-meta">@types</span>/react <span class="hljs-meta">@types</span>/react-<span class="hljs-keyword">native</span> <span class="hljs-meta">@types</span>/react-navigation<br></code></pre></td></tr></table></figure><p>至此，这个项目已经可以配置使用TypeScript进行ReactNative开发，感觉TypeScript比Javascript使用起来更爽，开发更便捷</p><p>文件：Body.tsx</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; View, SafeAreaView &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-native&#x27;</span>;<br><span class="hljs-keyword">import</span> DStatusBar <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@/components/DStatusBar&quot;</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> (&#123; children, style=&#123;&#125; &#125;) =&gt; &#123;<br>    <span class="hljs-keyword">return</span> (<br>        <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">View</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;[&#123;</span></span></span><br><span class="hljs-tag"><span class="xml">            <span class="hljs-attr">flex:</span> <span class="hljs-attr">1</span>,</span></span><br><span class="hljs-tag"><span class="xml">            <span class="hljs-attr">minHeight:</span> <span class="hljs-attr">global.SCREEN_HEIGHT</span>,</span></span><br><span class="hljs-tag"><span class="xml">            <span class="hljs-attr">width:</span> <span class="hljs-attr">global.SCREEN_WIDTH</span>,</span></span><br><span class="hljs-tag"><span class="xml">            <span class="hljs-attr">position:</span> &#x27;<span class="hljs-attr">relative</span>&#x27;,</span></span><br><span class="hljs-tag"><span class="xml">            <span class="hljs-attr">backgroundColor:</span> <span class="hljs-attr">global.gThemeFun.themeGetColor</span>(&#x27;<span class="hljs-attr">main_bg_color</span>&#x27;)</span></span><br><span class="hljs-tag"><span class="xml">        &#125;, <span class="hljs-attr">style</span>]&#125;&gt;</span></span><br><span class="xml">            <span class="hljs-tag">&lt;<span class="hljs-name">DStatusBar</span> /&gt;</span></span><br><span class="xml">            &#123;children&#125;</span><br><span class="xml">            <span class="hljs-tag">&lt;<span class="hljs-name">SafeAreaView</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">SafeAreaView</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">View</span>&gt;</span></span><br>    )<br>&#125;<br></code></pre></td></tr></table></figure><p>附上我遇到的一个问题，项目中以前的全局变量在ts中都无法使用，ts的全局变量需要重新声明<br>声明方法如下：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-comment">// ts全局变量声明</span><br><span class="hljs-keyword">declare</span> <span class="hljs-built_in">global</span> &#123;<br>    <span class="hljs-keyword">namespace</span> NodeJS &#123;<br>        <span class="hljs-keyword">interface</span> Global &#123;<br>            <span class="hljs-attr">gApi</span>: <span class="hljs-built_in">any</span>;  <span class="hljs-comment">// 全局api调用方法集</span><br>            gHttp: <span class="hljs-built_in">any</span>; <span class="hljs-comment">// 全局axios请求</span><br>            <span class="hljs-comment">// global.$api = apis()</span><br>            gStyle: <span class="hljs-built_in">any</span>;  <span class="hljs-comment">// 全局通用样式（不包过多主题）</span><br>            gImg: <span class="hljs-built_in">any</span>;  <span class="hljs-comment">// 全局图片路径字典</span><br>            gOs: <span class="hljs-built_in">String</span>;  <span class="hljs-comment">// 当前系统类型（android || ios）</span><br>            gThemeFun: <span class="hljs-built_in">any</span>; <span class="hljs-comment">// 全局多主题方法集</span><br>            $TRACK_KEY: <span class="hljs-built_in">String</span>; <span class="hljs-comment">// token的AES加密key</span><br>            $TRACK: <span class="hljs-built_in">String</span>; <span class="hljs-comment">// tonken密匙</span><br>            i18n: <span class="hljs-built_in">any</span>;  <span class="hljs-comment">// 全局多语言处理对象</span><br>            gFSize: <span class="hljs-built_in">Function</span>; <span class="hljs-comment">// 全局文字自适应手机屏幕大小函数</span><br>            GWSize: <span class="hljs-built_in">Function</span>; <span class="hljs-comment">// 全局宽度自适应手机屏幕大小函数</span><br>            gHSize: <span class="hljs-built_in">Function</span>; <span class="hljs-comment">// 全局高度自适应手机屏幕大小函数</span><br>            SCREEN_HEIGHT: <span class="hljs-built_in">number</span>;  <span class="hljs-comment">// 当前手机屏幕高度</span><br>            SCREEN_WIDTH: <span class="hljs-built_in">number</span>;   <span class="hljs-comment">// 当前手机屏幕宽度</span><br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-comment">// 全局对象调用/赋值/修改：global.xxx</span><br><span class="hljs-keyword">import</span> &#123; Platform &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-native&#x27;</span>;<br><span class="hljs-comment">// 分辨率适配</span><br><span class="hljs-keyword">import</span> api <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@/http/apis&quot;</span><br><span class="hljs-keyword">import</span> http <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/http/http&#x27;</span>;<br><span class="hljs-comment">// import apis from &#x27;@/http/apis/index&#x27;;</span><br><br><span class="hljs-comment">// 全局样式</span><br><span class="hljs-keyword">import</span> gStyle <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/assets/style/common&#x27;</span>;<br><br><span class="hljs-comment">// 图片管理</span><br><span class="hljs-keyword">import</span> imgManager <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@/assets/img&quot;</span><br><br><span class="hljs-comment">// 多主题设置方法</span><br><span class="hljs-keyword">import</span> themeFun <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/theme/themeFun&#x27;</span>;<br><span class="hljs-comment">// 多语言</span><br><span class="hljs-keyword">import</span> &#123; i18n &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/utils/locales/index&#x27;</span>;<br><span class="hljs-comment">// 定义全局变量</span><br><span class="hljs-built_in">global</span>.gApi = api<br><span class="hljs-built_in">global</span>.gHttp = http<br><span class="hljs-built_in">global</span>.gStyle = gStyle<br><span class="hljs-built_in">global</span>.gImg = imgManager<br><span class="hljs-built_in">global</span>.gOs = Platform.OS<br><span class="hljs-built_in">global</span>.gThemeFun = themeFun<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>ReactNative</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ts</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ReactNative网络调试工具Reactotron</title>
    <link href="/2021/09/16/React-Native%E7%BD%91%E7%BB%9C%E8%B0%83%E8%AF%95%E5%B7%A5%E5%85%B7Reactotron/"/>
    <url>/2021/09/16/React-Native%E7%BD%91%E7%BB%9C%E8%B0%83%E8%AF%95%E5%B7%A5%E5%85%B7Reactotron/</url>
    
    <content type="html"><![CDATA[<blockquote><p>Reactotron是为React Native应用提供网络调试的工具，其功能与浏览器的F12一样</p></blockquote><ul><li><p><a href="https://github.com/infinitered/reactotron/releases">下载相应reactotron</a></p></li><li><p>安装reacttotron在自己的RN项目中的dev依赖上</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livescript"><span class="hljs-built_in">npm</span> i --save-dev reactotron-react-<span class="hljs-keyword">native</span><br></code></pre></td></tr></table></figure></li><li><p>在项目目录下创建ReactotronConfig.js 文件，并且将以下代码粘贴进去</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> Reactotron <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;reactotron-react-native&#x27;</span><br>Reactotron<br> .configure() <span class="hljs-comment">// controls connection &amp; communication settings</span><br> .useReactNative() <span class="hljs-comment">// add all built-in react native plugins</span><br> .connect() <span class="hljs-comment">// let&#x27;s connect!</span><br></code></pre></td></tr></table></figure></li><li><p>最后在App.js或者index.js中引入ReactotronConfig.js，添加以下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//注意此处文件路径改为自己项目中的相对路径</span><br><span class="hljs-keyword">if</span>(__DEV__) &#123;<br>  <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;./ReactotronConfig&#x27;</span>).then(<span class="hljs-function">() =&gt;</span> <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;Reactotron Configured&#x27;</span>))<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>打开reactotron工具，启动项目</p></li><li><p>现在便可以进行相关网络请求的调试；注意：其默认监听的端口为9090，确保其没有被占用的情况下使用；并且如果是用真机调试，请开启9090连接</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">adb</span> reverse tcp:<span class="hljs-number">9090</span> tcp:<span class="hljs-number">9090</span><br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>ReactNative</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ReactNative</tag>
      
      <tag>开发工具</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>搭建 Hexo 博客</title>
    <link href="/2021/09/08/hexo%E5%BB%BA%E7%AB%99/"/>
    <url>/2021/09/08/hexo%E5%BB%BA%E7%AB%99/</url>
    
    <content type="html"><![CDATA[<blockquote><p>心血来潮想搭建个自己的个人博客网站，发现Hexo这个神器，5分钟搭建网站加上极客的写作方式，我立马拍板！</p></blockquote><blockquote><p><em><a href="https://hexo.io/">Hexo</a> 是一个基于nodejs 的静态博客网站生成器，支持 Markdown。</em></p></blockquote><blockquote><p>决定往往在一瞬之间，开始吧~</p></blockquote><h2 id="安装-Hexo"><a href="#安装-Hexo" class="headerlink" title="安装 Hexo"></a>安装 Hexo</h2><p>默认电脑已有node环境，接下来安装Hexo</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">$ npm <span class="hljs-keyword">install</span> hexo<br></code></pre></td></tr></table></figure><p>安装 Hexo 完成后，请执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-variable">$</span> hexo init &lt;folder&gt;<br><span class="hljs-variable">$</span> <span class="hljs-built_in">cd</span> &lt;folder&gt;<br><span class="hljs-variable">$</span> npm install<br></code></pre></td></tr></table></figure><h2 id="安装Fluid主题"><a href="#安装Fluid主题" class="headerlink" title="安装Fluid主题"></a>安装Fluid主题</h2><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">npm install <span class="hljs-comment">--save hexo-theme-fluid</span><br></code></pre></td></tr></table></figure><p>然后在博客目录下创建 _config.fluid.yml，将主题的 <a href="https://github.com/fluid-dev/hexo-theme-fluid/blob/master/_config.yml">_config.yml</a>内容复制过去。</p><h2 id="指定主题"><a href="#指定主题" class="headerlink" title="指定主题"></a>指定主题</h2><p>如下修改 Hexo 博客目录中的 _config.yml：</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">theme:</span> fluid  <span class="hljs-meta"># 指定主题</span><br><span class="hljs-symbol">language:</span> <span class="hljs-built_in">zh</span>-CN  <span class="hljs-meta"># 指定语言，会影响主题显示的语言，按需修改</span><br></code></pre></td></tr></table></figure><h2 id="下载依赖运行项目"><a href="#下载依赖运行项目" class="headerlink" title="下载依赖运行项目"></a>下载依赖运行项目</h2><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">yarn <span class="hljs-keyword">install</span><br><span class="hljs-keyword"></span><span class="hljs-keyword">or</span><br><span class="hljs-keyword"></span>npm i<br><span class="hljs-comment"># 运行项目</span><br>yarn server<br></code></pre></td></tr></table></figure><h2 id="Hexo命令"><a href="#Hexo命令" class="headerlink" title="Hexo命令"></a>Hexo命令</h2><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs vala"><span class="hljs-meta"># 运行项目</span><br>hexo server<br><br><span class="hljs-meta"># 打包发布</span><br>hexo deploy<br></code></pre></td></tr></table></figure><h2 id="配置GitHub·page"><a href="#配置GitHub·page" class="headerlink" title="配置GitHub·page"></a>配置GitHub·page</h2><ul><li>hexo可搭配GitHub-Page一键部署网站，具体详情步骤参考<a href="https://hexo.io/zh-cn/docs/github-pages">将 Hexo 部署到 GitHub Pages</a></li><li>hexo提供了一键部署，一条命令将网站部署到服务器，具体步骤参考<a href="https://hexo.io/zh-cn/docs/one-command-deployment">hexo一键部署</a></li></ul><p>配置完GitHub-Page网站就搭建完成啦，hexo的一键部署特别方便，打包及自动上传git发布，此外搭建到自己的服务器上只需要一个nginx即可，本文就不再描述了</p><p>开始愉快的写作吧~~·</p>]]></content>
    
    
    <categories>
      
      <category>node</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
